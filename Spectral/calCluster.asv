function [belongTo] = calCluster(TR, nClusters, rate)
	%nClusters = 3;
    %scale = 8; %TODO: real time
    belongTo = zeros(1,size(TR,1));
    for i=1:nClusters
        belongTo = getClusterFromCol(TR, belongTo, i, rate);
    end
end

function [belongTo] = getClusterFromCol(TR, belongTo, nClust, rate)
    col = TR(:,nClust)
    len = size(col);
    dist.data = zeros(1,len);
    % remove the clustered point
    for i=1:len
        if belongTo(i) ~= 0
            col(i) = -realmax;
        end
    end
    % max value of remained points
    maxElement = max(col);
    maxDist = 0;
    minDist = realmax;
    % distance of all remained points
    for i = 1:len
        dist.index(i) = i;
        if belongTo(i) == 0
            dist.data(i) = getDistance(col(i),maxElement);
            if dist.data(i) > maxDist
                maxDist = dist.data(i);
            end
            if dist.data(i) < minDist && dist.data(i) > 0
                minDist = dist.data(i);
            end
        else
            dist.data(i) = realmax;
        end
    end
    % compute scale
    scale = maxDist/minDist;
    
    % sum of the remained point value
    dist_sum  =0;
    for i = 1:len
        if belongTo(i) == 0
            dist_sum = dist_sum + dist.data(i);
        end
    end
    
    % sort by ascent
    dist= qSort(dist);
    
    dist_sum = dist_sum*rate
    tmp_sum = 0;
    k = 1;
    % get a small part of whole energe (e.g rate = 5%)
    for k = 1:len
        if tmp_sum + dist.data(k) < dist_sum
            tmp_sum = tmp_sum + dist.data(k);
        else
            break;
        end
    end
    tmp_sum
    % break out at k, so the first k-1 belong to the same cluster
    for j = 1:k-1
        index = dist.index(j);
        if belongTo(index) == 0
            belongTo(index) = nClust;
        end
    end
    belongTo
    % choose the value less than scale*minDist to Cluster 'nClust'
    % optimize: use the computed distance in dist(i,j)
%     for i = 1:len
%         if getDistance(col(i), maxElement) <= scale*minDist
%             if belongTo(i) == 0
%                 belongTo(i) = nClust;
%             end
%         end
%     end
end

% Define distance between two elements
function [dist] = getDistance(a,b)
    dist = (a - b)^2;
end